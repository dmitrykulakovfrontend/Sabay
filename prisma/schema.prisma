// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                 String  @id @default(cuid()) @map("_id")
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid()) @map("_id")
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String      @id @default(cuid()) @map("_id")
    name           String?
    email          String?     @unique
    emailVerified  DateTime?
    image          String?
    Account        Account[]
    Session        Session[]
    groups         Group[]     @relation(fields: [groupsIDs], references: [id])
    groupsIDs      String[]    @db.ObjectId
    communities    Community[] @relation(fields: [communitiesIDs], references: [id])
    communitiesIDs String[]    @db.ObjectId
}

model TransactionNotification {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    groupId   String   @db.ObjectId
    userId    String
    amount    Int
    type      String
    createdAt DateTime @default(now())
    read      Boolean  @default(false)
}

model InviteNotification {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String
    groupId   String   @db.ObjectId
    invitedBy String
    groupName String
    createdAt DateTime @default(now())
    accepted  Boolean  @default(false)
    read      Boolean  @default(false)
}

model Transaction {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    type        String
    amount      Int
    time        DateTime
    place       String?
    title       String?
    description String?
    Group       Group    @relation(fields: [groupId], references: [id])
    groupId     String   @db.ObjectId
}

model Group {
    id           String        @id @default(auto()) @map("_id") @db.ObjectId
    name         String
    icon         String
    description  String?
    users        User[]        @relation(fields: [usersIDs], references: [id])
    usersIDs     String[]
    transactions Transaction[]
}

model Community {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String?
    icon        String
    users       User[]   @relation(fields: [usersIDs], references: [id])
    usersIDs    String[]
}
